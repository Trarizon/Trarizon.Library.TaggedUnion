using Microsoft.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Trarizon.Library.TaggedUnion.SourceGenerator.Core.Mirror;
using Trarizon.Library.TaggedUnion.SourceGenerator.Utilities;

namespace Trarizon.Library.TaggedUnion.SourceGenerator.Core;
partial record StructUnion : IUnion
{
    private const string InternalUnmanagedUnion_TypeIdentifier = "__Unmanageds";

    public string Emit()
    {
        using var sw = new StringWriter();
        using var writer = new IndentedTextWriter(sw);
        writer.WriteLine("// <auto-generated />");
        writer.WriteLine();
        EmitNamespaceAndType(writer);

        return sw.ToString();
    }

    private void EmitNamespaceAndType(IndentedTextWriter writer)
    {
        using (var idt = writer.DeferIndentBack()) {
            // Containing namespace and types
            if (!ContainingNamespace.IsGlobalNamespace) {
                writer.WriteLine($"namespace {ContainingNamespace}");
                writer.WriteLine("{");
                idt.Indent("}");
            }
            foreach (var (keyword, identifier) in ContainingTypes) {
                writer.WriteLine($"partial {keyword} {identifier}");
                writer.WriteLine("{");
                idt.Indent("}");
            }

            // Type
            var modifiers = Modifiers is null ? "" : $"{Modifiers} ";
            writer.WriteLine($"{modifiers}partial struct {TypeName}");
            if (GenerationOptions.HasFlag(TaggedUnionGenerationOptions.IDisposable)) {
                writer.WriteLine($"    : global::{Literals.IDisposable_TypeName}");
            }
            writer.WriteLine("{");
            idt.Indent("}");

            EmitFields(writer);
            writer.WriteLine();
            EmitInternalUnmanagedUnion(writer);
            writer.WriteLine();
            EmitConstructor(writer);
            writer.WriteLine();
            EmitTagProperty(writer);

            foreach (var variant in Variants) {
                writer.WriteLine();
                EmitVariant(writer, variant);
            }

            if (GenerationOptions.HasFlag(TaggedUnionGenerationOptions.IDisposable)) {
                writer.WriteLine();
                EmitDisposeMethod(writer);
            }

            if (GenerationOptions.HasFlag(TaggedUnionGenerationOptions.Match)) {
                writer.WriteLine();
                EmitMatchMethods(writer);
            }
        }
    }

    private void EmitFields(IndentedTextWriter writer)
    {
        // __obj{i}
        // i - index
        if (ObjectFieldCount > 0) {
            writer.WriteLine($"#nullable disable");
            for (int i = 0; i < ObjectFieldCount; i++)
                writer.WriteLine($"private object __obj{i};");
            writer.WriteLine($"#nullable restore");
        }

        writer.WriteLine($"private readonly {TagTypeFullQualifiedName} __tag;");

        if (ContainsUnmanaged) {
            writer.WriteLine($"private {InternalUnmanagedUnionFullQualifiedTypeName} __unmanageds;");
        }

        // __managed{i}_{j}
        // i - type index
        // j - instance index
        foreach (var kv in ManagedFields) {
            var type = kv.Key.ToFullQualifiedDisplayString();
            var (typeIndex, count) = kv.Value;
            for (int i = 0; i < count; i++) {
                writer.WriteLine($"private {type} __managed{typeIndex}_{i};");
            }
        }
    }

    private void EmitConstructor(IndentedTextWriter writer)
    {
        writer.WriteLine($"#pragma warning disable CS8618");
        writer.WriteLine($"private {TypeName}({TagTypeFullQualifiedName} tag) {{ __tag = tag; }}");
        writer.WriteLine($"#pragma warning restore CS8618");
    }

    private void EmitTagProperty(IndentedTextWriter writer)
    {
        writer.WriteLine($"public readonly {TagTypeFullQualifiedName} {TagPropertyName} {{ get {{ return this.__tag; }} }}");
    }

    private void EmitInternalUnmanagedUnion(IndentedTextWriter writer)
    {
        writer.WriteLine($"[global::{Literals.StructLayoutAttribute_TypeName}({Literals.LayoutKind_Explicit_FieldName})]");
        writer.WriteLine($"private struct {InternalUnmanagedUnion_TypeIdentifier}");
        writer.WriteLine($"{{");
        using (writer.Indent("}")) {
            int i = 0;
            foreach (var variant in Variants) {
                // TODO: this switch is copied from EmitVariant, 
                // maybe we shoul cache it somewhere to do optimization
                string? unmanagedTupleTypeName = variant.UnmanagedFieldCount switch {
                    0 => null,
                    1 => variant.Fields
                        .First(vf => vf.UnionField.Kind is UnionFieldKind.Unmanaged)
                        .Type.ToFullQualifiedDisplayString(),
                    _ => $"({string.Join(", ", variant.Fields.Where(vf => vf.UnionField.Kind is UnionFieldKind.Unmanaged).Select(vf => vf.Type.ToFullQualifiedDisplayString()))})",
                };

                if (unmanagedTupleTypeName is not null) {
                    writer.WriteLine($"[global::{Literals.FieldOffsetAttribute_TypeName}(0)] {unmanagedTupleTypeName} __{i};");
                    i++;
                }
            }
        }
    }

    private unsafe void EmitVariant(IndentedTextWriter writer, Variant variant)
    {
        // TODO:这些参数在Variant里重新实现了一遍，看看要不要确定改到那边去
        // EmitInternalUnmanagedUnion里有一份这个的拷贝，记得一起改
        var parameterListString = string.Join(", ", variant.Fields.Select(field => $"{field.Type.ToFullQualifiedDisplayString()} {field.Name}"));
        var parameterListString_out = string.Join(", ", variant.Fields.Select(field => $"out {field.Type.ToFullQualifiedDisplayString()} {field.Name}"));

        string? unmanagedTupleTypeName;
        delegate*<int, string?> unmanagedTupleItemAccess;
        switch (variant.UnmanagedFieldCount) {
            case 0:
                unmanagedTupleTypeName = null;
                unmanagedTupleItemAccess = default;
                break;
            case 1:
                unmanagedTupleTypeName = variant.Fields
                    .First(vf => vf.UnionField.Kind is UnionFieldKind.Unmanaged)
                    .Type.ToFullQualifiedDisplayString();
                unmanagedTupleItemAccess = &ReturnNull;

                static string? ReturnNull(int index) => null;
                break;
            default:
                unmanagedTupleTypeName = $"({string.Join(", ", variant.Fields.Where(vf => vf.UnionField.Kind is UnionFieldKind.Unmanaged).Select(vf => vf.Type.ToFullQualifiedDisplayString()))})";
                unmanagedTupleItemAccess = &GetItemAccess;

                static string? GetItemAccess(int tupleItemIndex) => $".Item{tupleItemIndex}";
                break;
        }

        writer.WriteLineNoTabs($"#region {variant.Name}");
        writer.WriteLine();

        EmitCreator();
        writer.WriteLine();
        void EmitCreator()
        {
            writer.WriteLine($"public static {TypeNameFullQualified} New_{variant.Name}({parameterListString})");
            writer.WriteLine("{");
            using (writer.Indent("}")) {
                // res = new(Tag);
                writer.WriteLine($"{TypeNameFullQualified} __res = new {TypeNameFullQualified}({TagTypeFullQualifiedName}.{variant.Name});");

                // ref (unmanaged) __unmanageds_local = ref Unsafe.As<>(ref this.__unmanageds);
                if (unmanagedTupleTypeName is not null) {
                    writer.WriteLine($"ref {unmanagedTupleTypeName} __unmanageds_local = ref global::{Literals.Unsafe_As_MethodName}<{InternalUnmanagedUnionFullQualifiedTypeName}, {unmanagedTupleTypeName}>(ref __res.__unmanageds);");
                }

                // res.field = param;
                foreach (var vf in variant.Fields) {
                    var uf = vf.UnionField;
                    switch (vf.UnionField) {
                        case { Kind: UnionFieldKind.Class, Class_Index: var index }:
                            writer.WriteLine($"__res.__obj{index} = {vf.Name};");
                            break;
                        case { Kind: UnionFieldKind.Unmanaged, Unmanaged_TupleItemIndex: var tupleItemIndex }:
                            writer.WriteLine($"__unmanageds_local{unmanagedTupleItemAccess(tupleItemIndex)} = {vf.Name};");
                            break;
                        case { Kind: UnionFieldKind.ManagedStruct, ManagedStruct: (var typeIndex, var instanceIndex) }:
                            writer.WriteLine($"__res.__managed{typeIndex}_{instanceIndex} = {vf.Name};");
                            break;
                        default:
                            break;
                    }
                }

                writer.WriteLine("return __res;");
            }
        }


        // TryGetter
        EmitTryGetter();
        writer.WriteLine();
        void EmitTryGetter()
        {
            writer.WriteLine($"public bool TryGet_{variant.Name}({parameterListString_out})");
            writer.WriteLine("{");
            using (writer.Indent("}")) {
                // true
                writer.WriteLine($"if (this.__tag == {TagTypeFullQualifiedName}.{variant.Name}) {{");
                using (writer.Indent("}")) {
                    // ref (unmanaged) __unmanageds_local = ref Unsafe.As<>(ref this.__unmanageds);
                    if (unmanagedTupleTypeName is not null) {
                        writer.WriteLine($"ref {unmanagedTupleTypeName} __unmanageds_local = ref global::{Literals.Unsafe_As_MethodName}<{InternalUnmanagedUnionFullQualifiedTypeName}, {unmanagedTupleTypeName}>(ref this.__unmanageds);");
                    }
                    // param = res.field
                    foreach (var vf in variant.Fields) {
                        switch (vf.UnionField) {
                            case { Kind: UnionFieldKind.Class, Class_Index: var index }:
                                if (vf.Type.SpecialType is SpecialType.System_Object)
                                    writer.WriteLine($"{vf.Name} = this.__obj{index};");
                                else
                                    writer.WriteLine($"{vf.Name} = global::{Literals.Unsafe_As_MethodName}<{vf.Type.ToFullQualifiedDisplayString()}>(this.__obj{index});");
                                break;
                            case { Kind: UnionFieldKind.Unmanaged, Unmanaged_TupleItemIndex: var tupleItemIndex }:
                                writer.WriteLine($"{vf.Name} = __unmanageds_local{unmanagedTupleItemAccess(tupleItemIndex)};");
                                break;
                            case { Kind: UnionFieldKind.ManagedStruct, ManagedStruct: (var typeIndex, var instanceIndex) }:
                                writer.WriteLine($"{vf.Name} = this.__managed{typeIndex}_{instanceIndex};");
                                break;
                        }
                    }
                    writer.WriteLine($"return true;");
                }
                writer.WriteLine("else {");
                using (writer.Indent("}")) {
                    foreach (var field in variant.Fields) {
                        writer.WriteLine($"{field.Name} = default!;");
                    }
                    writer.WriteLine($"return false;");
                }
            }
        }


        // View
        if (GenerationOptions.HasFlag(TaggedUnionGenerationOptions.RefView) && variant.Fields.Count > 0) {
            EmitRefView();
            writer.WriteLine();
        }
        void EmitRefView()
        {
            writer.WriteLineNoTabs("#if NET7_0_OR_GREATER");
            writer.WriteLine();

            string viewStructIdentifier = $"{variant.Name}_View";

            // we set this struct partial so user can add their own method.
            writer.WriteLine($"[{Literals.UnscopedRefAttribute_TypeName}] public {TypeNameFullQualified}.{variant.Name}_View {variant.Name}_Ref {{ get {{ return new {TypeNameFullQualified}.{variant.Name}_View(ref this); }} }}");
            writer.WriteLine();
            writer.WriteLine($"public readonly ref partial struct {viewStructIdentifier}");
            writer.WriteLine($"{{");
            using (writer.Indent("}")) {
                // ref field
                writer.WriteLine($"private readonly ref {TypeNameFullQualified} __ref;");
                writer.WriteLine();

                // constructor
                writer.WriteLine($"public {viewStructIdentifier}(ref {TypeNameFullQualified} union)");
                writer.WriteLine($"{{");
                writer.WriteLine($"    this.__ref = ref union;");
                writer.WriteLine($"}}");
                writer.WriteLine();

                // properties
                foreach (var vf in variant.Fields) {
                    switch (vf.UnionField) {
                        case { Kind: UnionFieldKind.Class, Class_Index: var index }:
                            if (vf.Type.SpecialType is SpecialType.System_Object)
                                writer.WriteLine($"public ref object {vf.Name} {{ get {{ return ref this.__ref.__obj{index}; }} }}");
                            else {
                                var fieldTypeName = vf.Type.ToFullQualifiedDisplayString();
                                writer.WriteLine($"public ref {fieldTypeName} {vf.Name} {{ get {{ return ref global::{Literals.Unsafe_As_MethodName}<object, {fieldTypeName}>(ref this.__ref.__obj{index}); }} }}");
                            }
                            break;
                        case { Kind: UnionFieldKind.Unmanaged, Unmanaged_TupleItemIndex: var tupleItemIndex }:
                            writer.WriteLine($"public ref {vf.Type.ToFullQualifiedDisplayString()} {vf.Name} {{ get {{ return ref global::{Literals.Unsafe_As_MethodName}<{InternalUnmanagedUnionFullQualifiedTypeName}, {unmanagedTupleTypeName}>(ref __ref.__unmanageds){unmanagedTupleItemAccess(tupleItemIndex)}; }} }}");
                            break;
                        case { Kind: UnionFieldKind.ManagedStruct, ManagedStruct: (var typeIndex, var instanceIndex) }:
                            writer.WriteLine($"public ref {vf.Type.ToFullQualifiedDisplayString()} {vf.Name} {{ get {{ return ref __ref.__managed{typeIndex}_{instanceIndex}; }} }}");
                            break;
                    }
                    writer.WriteLine();
                }

                // Deconstruct method
                writer.WriteLine($"public void Deconstruct({parameterListString_out})");
                writer.WriteLine($"{{");
                foreach (var field in variant.Fields) {
                    writer.WriteLine($"    {field.Name} = this.{field.Name};");
                }
                writer.WriteLine($"}}");
            }

            writer.WriteLine();
            writer.WriteLineNoTabs("#endif");
        }

        writer.WriteLineNoTabs("#endregion");
    }

    private void EmitDisposeMethod(IndentedTextWriter writer)
    {
        writer.WriteLine("public void Dispose()");
        writer.WriteLine("{");
        using (writer.Indent("}")) {
            var disposableVariants = Variants
                .WhereSelect(v =>
                {
                    var disposableFields = v.Fields
                        .Where(vf => vf.Type.AllInterfaces.Any(i => i.ToDisplayString() is Literals.IDisposable_TypeName))
                        .ToListIfAny();
                    if (disposableFields is null)
                        return default(Optional<(Variant, List<VariantField>)>);
                    else
                        return (v, disposableFields);
                })
                .ToListIfAny();
            if (disposableVariants is null)
                return;

            writer.WriteLine($"switch ({TagPropertyName}) {{");
            using (writer.Indent("}")) {
                foreach (var (variant, disposableFields) in disposableVariants) {
                    writer.WriteLine($"case {TagTypeFullQualifiedName}.{variant.Name}: {{");
                    using (writer.Indent("}")) {
                        foreach (var field in disposableFields) {
                            switch (field.UnionField) {
                                case { Kind: UnionFieldKind.Class, Class_Index: var index }:
                                    writer.WriteLine($"((global::{Literals.IDisposable_TypeName})this.__obj{index}).Dispose();");
                                    break;
                                case { Kind: UnionFieldKind.Unmanaged, Unmanaged_TupleItemIndex: var tupleItemIndex }:
                                    var fieldAccess = $"global::{Literals.Unsafe_As_MethodName}<{InternalUnmanagedUnionFullQualifiedTypeName}, {variant.UnmanagedTupleTypeName}>(ref this.__unmanageds){variant.UnmanagedTupleItemAccess(tupleItemIndex)}";
                                    writer.WriteLine($"((global::{Literals.IDisposable_TypeName})({fieldAccess})).Dispose();");
                                    break;
                                case { Kind: UnionFieldKind.ManagedStruct, ManagedStruct: (var typeIndex, var instanceIndex) }:
                                    writer.WriteLine($"((global::{Literals.IDisposable_TypeName})this.__managed{typeIndex}_{instanceIndex}).Dispose();");
                                    break;
                            }
                        }
                        writer.WriteLine("break;");
                    }
                }
            }
        }
    }

    private void EmitMatchMethods(IndentedTextWriter writer)
    {
        writer.WriteLine($"public TResult Match<TResult>({VariantParameterList()})");
        writer.WriteLine($"{{");
        using (writer.Indent("}")) {
            writer.WriteLine($"switch ({TagPropertyName}) {{");
            using (writer.Indent("}")) {
                foreach (var variant in Variants) {
                    writer.WriteLine($"case {TagTypeFullQualifiedName}.{variant.Name}: {{");
                    using (writer.Indent("}")) {
                        // TODO: 这里用了TryGet，最好是省去Try
                        writer.WriteLine($"this.TryGet_{variant.Name}({string.Join(", ", variant.Fields.Select((vf, i) => $"out {vf.Type.ToFullQualifiedDisplayString()} __{i}"))});");
                        writer.WriteLine($"return {variant.Name}.Invoke({string.Join(", ", variant.Fields.Select((_, i) => $"__{i}"))});");
                    }
                }
                writer.WriteLine($"default:");
                writer.WriteLine($"    if (Default is null)");
                writer.WriteLine($"        throw new global::System.InvalidOperationException(\"Unknown tagged union case.\");");
                writer.WriteLine($"    return Default.Invoke();");
            }
        }

        string VariantParameterList()
        {
            return string.Join($", ",
                Variants.Select(v => $"global::{Literals.Func_TypeName}<{FieldTypes(v)}> {v.Name}")
                    .Append($"global::{Literals.Func_TypeName}<TResult>? Default = null"));

            string FieldTypes(Variant variant)
            {
                return string.Join(", ",
                    variant.Fields.Select(vf => vf.Type.ToFullQualifiedDisplayString())
                        .Append("TResult"));
            }
        }
    }
}
